/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.etracker;

import android.app.AlertDialog;

import com.etracker.tracking.Tracker;
import com.etracker.tracking.UserConsent;
import com.etracker.tracking.order.Order;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;


@Kroll.module(name="TiEtracker", id="ti.etracker")
public class TiEtrackerModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "etracker";
	private static final boolean DBG = TiConfig.LOGD;
	private Tracker tracker;

	public TiEtrackerModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
	}



	@Kroll.method
	public void getConsent(KrollDict obj)
	{
		if (tracker.getUserConsentTracking() == UserConsent.Unknown) {

			AlertDialog.Builder builder = new AlertDialog.Builder(TiApplication.getInstance().getCurrentActivity());

			builder.setMessage(TiConvert.toString(obj.get("message"),"Allow tracking?"))
					.setPositiveButton(TiConvert.toString(obj.get("yes"),"yes"), (dialogInterface, i) -> tracker.setUserConsentTracking(UserConsent.Granted))
					.setNegativeButton(TiConvert.toString(obj.get("no"),"no"), (dialogInterface, i) -> tracker.setUserConsentTracking(UserConsent.Denied))
					.create()
					.show();
		}
	}

	@Kroll.method
	public void allowTracking() {
		tracker.setUserConsentTracking(UserConsent.Granted);
	}

	@Kroll.method
	public void denyTracking() {
		tracker.setUserConsentTracking(UserConsent.Denied);
	}

	@Kroll.method
	public void startTracker(KrollDict obj)
	{
		String _key = TiConvert.toString(obj.get("accountKey"),"");
		String _appName = TiConvert.toString(obj.get("appName"),"");
		String _appVersion = TiConvert.toString(obj.get("appVersion"),"");
		int _interval = TiConvert.toInt(obj.get("interval"),-1);

		tracker = Tracker.getInstance(TiApplication.getAppRootOrCurrentActivity());
		if (_interval != -1 && _appVersion != "" && _appName != "" && _key != "") {
			tracker.startTracker(_key, _interval, _appName, _appVersion);
			Log.d(LCAT, "Start: " + _key + " " + _appName + " " + _appVersion + " " + _interval);
		} else if (_appVersion != "" && _appName != "" && _key != "") {
			tracker.startTracker(_key, _appName, _appVersion);
			Log.d(LCAT, "Start: " + _key + " " + _appName + " " + _appVersion);
		} else {
			tracker.startTracker(_key);
			Log.d(LCAT, "Start: " + _key);
		}
	}

	@Kroll.method
	public String getStatus()
	{
		return tracker.getUserConsentTracking().toString();
	}
	@Kroll.method
	public void stopTracker()
	{
		tracker.stopTracker();
	}

	@Kroll.method
	public void flush()
	{
		tracker.flush();
		Log.d(LCAT, "Flush");
	}

	@Kroll.method
	public void trackScreenView(KrollDict obj)
	{
		String _screen = TiConvert.toString(obj.get("screen"),"");
		String _area = TiConvert.toString(obj.get("area"),"");

		if (_screen != "" && _area != "") {
			tracker.trackScreenView(_screen, _area);
			Log.d(LCAT, "Track Screen:" + _screen + " " + _area);
		} else if (_screen != ""){
			tracker.trackScreenView(_screen);
			Log.d(LCAT, "Track Screen:" + _screen);
		}
	}

	@Kroll.method
	public void trackUserDefined(KrollDict obj)
	{
		String _area = TiConvert.toString(obj.get("area"),"");
		String _action = TiConvert.toString(obj.get("action"),"");
		String _object = TiConvert.toString(obj.get("object"),"");
		String _value = TiConvert.toString(obj.get("value"),"");
		String _screen = TiConvert.toString(obj.get("screen"),"");
		String _category = TiConvert.toString(obj.get("category"),"");

		if (_category != "" && _action != "" && _object != "" && _value != "" && _screen !="" && _area != "") {
			tracker.trackUserDefined(_category, _action, _object, _value, _screen, _area);
			Log.d(LCAT, "Track User:" + _category + " " + _action + " " + _object + " " + _value+ " " + _screen + " " + _area);
		} else if (_category != "" && _action != "" && _object != "" && _value != "") {
			tracker.trackUserDefined(_category, _action, _object, _value);
			Log.d(LCAT, "Track User:" + _category + " " + _action + " " + _object + " " + _value);
		} else if ( _category !="" && _action != "") {
			tracker.trackUserDefined(_category,_action);
			Log.d(LCAT, "Track User:" + _category + " " + _action);
		}
	}

	@Kroll.method
	public void trackOrder(KrollDict obj)
	{
		//Order _order = new Order(TiConvert.toString(obj.get("order"),""));
		//tracker.trackOrder(_order);
	}


}
